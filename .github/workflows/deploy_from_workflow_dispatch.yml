name: "Terraform Deploy Manual"
on:
  workflow_dispatch:
    inputs:
        requesting_team_input:
          description: 'Name of the requesting team'
          required: true
        app_service_input:
          description: 'Name of the Azure App Service'
          required: true
        location_input:
          description: 'Location to create Azure resources'
          required: true
          default: "eastus"
        sku_tier_input:
          description: 'SKU Tier of the Azure App Service'
          required: true
          default: "Standard"
        sku_size_input:
          description: 'SKU Size of the Azure App Service'
          required: true
          default: "S1"

  
env:
  ### Azure Service Principal Values
  TF_VAR_agent_client_id: ${{ secrets.TF_VAR_agent_client_id }}
  TF_VAR_agent_client_secret: ${{ secrets.TF_VAR_agent_client_secret }}
  TF_VAR_subscription_id: ${{ secrets.TF_VAR_subscription_id }}
  TF_VAR_tenant_id: ${{ secrets.TF_VAR_tenant_id }}
  ### Terraform file(s) directory
  tf_actions_working_dir: ./terraform
  ### Azure App Service Values
  TF_VAR_app_service_name: ${{ github.event.inputs.app_service_input }}
  TF_VAR_location: ${{ github.event.inputs.location_input }}
  TF_VAR_sku_tier: ${{ github.event.inputs.sku_tier_input }}
  TF_VAR_sku_size: ${{ github.event.inputs.sku_size_input }}
  TF_VAR_requesting_team: ${{ github.event.inputs.requesting_team_input }}


jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@master
      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1.2.0
        with:
          terraform_version: 0.13.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           TF_VAR_agent_client_id: ${{ secrets.TF_VAR_agent_client_id }}
#           TF_VAR_agent_client_secret: ${{ secrets.TF_VAR_agent_client_secret }}
#           TF_VAR_subscription_id: ${{ secrets.TF_VAR_subscription_id }}
#           TF_VAR_tenant_id: ${{ secrets.TF_VAR_tenant_id }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate 

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: false
      
      - name: Create New Issue
        id: newIssue
        uses: actions/github-script@v3.0.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          result-encoding: string
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Terraform Deploy Summary: Run ID ' + ${{ github.run_id }},
              body: output,
              assignee: context.actor,
              labels: [ 'terraform' ]
            }) 
      
      - name: Terraform Apply
        id: apply
        run: terraform apply -input=false -auto-approve
        continue-on-error: false
      
      - run: echo ${{ steps.newIssue.outputs.result }}
