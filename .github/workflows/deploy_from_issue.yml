name: "Terraform Deploy from Issue"
on:
  issues:
    types: [opened, reopened]
  
env:
  TF_VAR_agent_client_id: ${{ secrets.TF_VAR_agent_client_id }}
  TF_VAR_agent_client_secret: ${{ secrets.TF_VAR_agent_client_secret }}
  TF_VAR_subscription_id: ${{ secrets.TF_VAR_subscription_id }}
  TF_VAR_tenant_id: ${{ secrets.TF_VAR_tenant_id }}
  tf_actions_working_dir: ./terraform

jobs:

  issue_ops:
    name: "Extract Issue Ops Values From Issue"
    if: contains(github.event.issue.labels.*.name, 'terraform') 
    runs-on: ubuntu-latest
    outputs:
        requesting_team: ${{ steps.set_env_values.outputs.TF_VAR_requesting_team }}
        app_service_name: ${{ steps.set_env_values.outputs.TF_VAR_app_service_name }}
        location: ${{ steps.set_env_values.outputs.TF_VAR_location }}
        sku_size: ${{ steps.set_env_values.outputs.TF_VAR_sku_size }}
        sku_tier: ${{ steps.set_env_values.outputs.TF_VAR_sku_tier }}
        json_body_payload: ${{ steps.issue_body.outputs.payload }}
    
    steps:

      # This should be removed if the action is actually published in the future
      - name: Checkout Actions Source
        uses: actions/checkout@v2
        with:
          repository: octodemo/issue-body-parser-action
          path: issue-body-parser-action
          token: ${{ secrets.OCTODEMO_OCTODEMOBOT_TOKEN }}

      ### Issue Ops - Extract information
      - name: Extract Issue Demo Specification
        id: issue_body
        uses: ./issue-body-parser-action
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_id: ${{ github.event.issue.number }}
      

      - name: Set JSON Variables as Output Values
        id: set_env_values
        run: | 
          for s in $(echo '${{ steps.issue_body.outputs.payload }}' | jq -r "to_entries|map(\"\(.key)::\(.value|tostring)\")|.[]" ); do
          echo '::set-output name='"$s"''
          done

      - name: Print JSON Variables from Issue
        run: |
          echo "The requesting Team Name: ${{ steps.set_env_values.outputs.requesting_team }}"
          echo "The requested App Service Name Size: ${{ steps.set_env_values.outputs.app_service_name }}"
          echo "The requested Location: ${{ steps.set_env_values.outputs.location }}"
          echo "The requested SKU Size: ${{ steps.set_env_values.outputs.sku_size }}"
          echo "The requested SKU Tier: ${{ steps.set_env_values.outputs.sku_tier }}"
      
    
  terraform:
    name: "Terraform Deployment From Issue"
    needs: issue_ops
    if: contains(github.event.issue.labels.*.name, 'terraform') 
    
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}

    steps:
      
      - name: "Checkout"
        uses: actions/checkout@master

      - name: Set JSON Variables as ENV Variables
        id: set_env_values
        run: | 
          for s in $(echo '${{ needs.issue_ops.outputs.json_body_payload }}' | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
          echo "TF_VAR_"$s >> $GITHUB_ENV 
          done
        
      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1.2.0
        with:
          terraform_version: 0.13.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: false
      
      - name: Comment TF Plan Summary
        uses: actions/github-script@v3.0.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          result-encoding: string
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Apply
        id: apply
        run: terraform apply -no-color -input=false -auto-approve
        continue-on-error: true
      
      - name: Report Successful Apply
        id: report_success
        if: success()
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          token: ${{ secrets.OCTODEMO_OCTODEMOBOT_TOKEN }}
          body: >
            Demo Environment and GitHub repository request acknowledged.
            
            * __Repository__: ${{ steps.create_deployment.outputs.demo_repository_owner }}/${{ steps.create_deployment.outputs.demo_repository_name }}
            * __Deployment__: https://github.com/octodemo/bookstore-demo-bootstrap/deployments/activity_log?environment=${{ steps.create_deployment.outputs.demo_repository_name }}


      - name: Comment TF Apply Summary
        uses: actions/github-script@v3.0.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          result-encoding: string
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { TF_VAR_requesting_team, TF_VAR_app_service_name } = process.env;
            const output = `#### Terraform Apply üöÄ\`${{ steps.apply.outcome }}\`

            ### Environment Summary
            
            * __Azure Resource Group__: TF_VAR_requesting_team-rg
            * __Azure App Service Plan__: TF_VAR_requesting_team-web-appservice
            * __Azure App Service Name__: TF_VAR_app_service_name
            * __Actions Run:__ https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
