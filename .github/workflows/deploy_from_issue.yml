name: "Terraform Deploy from Issue"
on:
  issues:
    types: [opened, reopened]
  
env:
  TF_VAR_agent_client_id: ${{ secrets.TF_VAR_agent_client_id }}
  TF_VAR_agent_client_secret: ${{ secrets.TF_VAR_agent_client_secret }}
  TF_VAR_subscription_id: ${{ secrets.TF_VAR_subscription_id }}
  TF_VAR_tenant_id: ${{ secrets.TF_VAR_tenant_id }}
  tf_actions_working_dir: ./terraform

jobs:
  terraform:
    name: "Terraform Deployment From Issue"
    if: contains(github.event.issue.labels.*.name, 'create demo') 
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@master
      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1.2.0
        with:
          terraform_version: 0.13.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           TF_VAR_agent_client_id: ${{ secrets.TF_VAR_agent_client_id }}
#           TF_VAR_agent_client_secret: ${{ secrets.TF_VAR_agent_client_secret }}
#           TF_VAR_subscription_id: ${{ secrets.TF_VAR_subscription_id }}
#           TF_VAR_tenant_id: ${{ secrets.TF_VAR_tenant_id }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: false
      
      - name: Comment TF Plan Summary
        uses: actions/github-script@v3.0.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          result-encoding: string
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Apply
        id: apply
        run: terraform apply -no-color -input=false -auto-approve
        continue-on-error: true
      
      - name: Comment TF Apply Summary
        uses: actions/github-script@v3.0.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          result-encoding: string
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Apply ü§ñ${{ steps.apply.outputs.stdout }}
            #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`
            
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
